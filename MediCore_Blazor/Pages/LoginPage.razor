@page "/"

@using MediCore_Blazor.Services
@using MediCore_Library.Models.DTOs.DTO_Entities
@using MediCore_Library.Models.Identities
@inject HttpClient http
@inject GlobalConfig config
@inject NavigationManager nav
@inject SessionState state

<div class="login-div">
	<div class="title">
		<h1>Login</h1>
	</div>

	<EditForm Model="login" OnValidSubmit="LoginUser">
		<DataAnnotationsValidator />
		<ValidationSummary />

		<div class="input">
			<label>Email</label>
			<br />
			<InputText @bind-Value="login.Email" class="input-field" />
		</div>
		<div class="input">
			<label>Password</label>
			<br />
			<InputText @bind-Value="login.Password" class="input-field" />
		</div>
		<div class="submit">
			<button type="submit">Login</button>
		</div>
	</EditForm>
</div>

@code
{
	private Login login = new Login();
	private HttpResponseMessage? response;

	protected override void OnInitialized()
	{
		state.LoginResponse = null;
		state.Profile = null;
	}

	private async Task LoginUser()
	{
		response = await http.PostAsJsonAsync($"{config.BaseUrl}/authorize/login", login);

		if (response.IsSuccessStatusCode)
		{
			var result = await response.Content.ReadFromJsonAsync<LoginResponse>();
			state.LoginResponse = result;

			if (result is not null)
			{
				switch (result.Role.ToLowerInvariant())
				{
					case "admin":
						nav.NavigateTo("/admin");
						break;
					case "doctor":
						var doctor = await http.GetFromJsonAsync<DoctorDTO>($"{config.BaseUrl}/doctor/{result.ProfileId}");
						if (doctor is not null)
						{
							state.Profile = doctor;
							nav.NavigateTo("/doctor");
						}
						break;
					case "staff":
						var staff = await http.GetFromJsonAsync<StaffDTO>($"{config.BaseUrl}/staff/{result.ProfileId}");
						if (staff is not null)
						{
							state.Profile = staff;
							nav.NavigateTo("/staff");
						}
						break;
					case "patient":
						var patient = await http.GetFromJsonAsync<PatientDTO>($"{config.BaseUrl}/patient/{result.ProfileId}");
						if (patient is not null)
						{
							state.Profile = patient;
							nav.NavigateTo("/patient");
						}
						break;
				}
			}
		}
	}
}
